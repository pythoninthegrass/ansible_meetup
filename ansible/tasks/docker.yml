# code: language=ansible

---
- name: Define Docker images
  ansible.builtin.set_fact:
    docker_images:
      - name: python
        tag: "3.12"
      - name: redis
        tag: "7.4.0-alpine"

- name: Install docker (Linux)
  include_role:
    name: geerlingguy.docker
    apply:
      vars:
        docker_add_repo: true
        docker_repo_url: https://download.docker.com/linux
        docker_users:
          - "{{ ansible_user }}"
        docker_daemon_options:
          storage-driver: "vfs"
          log-opts:
            max-size: "100m"
        docker_install_compose_plugin: true
        docker_compose_package: docker-compose-plugin
        docker_compose_package_state: present
  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

# TODO: install docker desktop and start via 'open -a Docker'
# ! 'Cannot connect to the Docker daemon at unix:///var/run/docker.sock.'
- name: Install docker and dependencies (macOS)
  ansible.builtin.homebrew:
    name: "{{ item }}"
    state: latest
  loop:
    - docker
    - docker-compose
    - python@3.11
  become: false
  when: ansible_os_family == "Darwin"

- name: Set Python interpreter for macOS
  ansible.builtin.set_fact:
    ansible_python_interpreter: /opt/homebrew/bin/python3.11
  when: ansible_os_family == "Darwin"

- name: Install pip packages (macOS)
  ansible.builtin.pip:
    name:
      - docker
      - requests
    state: present
  environment:
    PATH: /opt/homebrew/bin:{{ ansible_env.PATH }}
  become: false
  when: ansible_os_family == "Darwin"

- name: Pull images
  community.docker.docker_image_pull:
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
  loop: "{{ docker_images }}"
  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

- name: Run a python container with a command
  community.docker.docker_container:
    name: python
    image: python:3.12
    state: started
    detach: false
    cleanup: true
    command: ["python", "-c", "print('Hello, Meetup!')"]
  register: python_container
  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

- name: Print python container output
  ansible.builtin.debug:
    msg: "{{ ansible_nodename }}: {{ python_container.container.Output }}"
  when: python_container is defined and python_container.container is defined
