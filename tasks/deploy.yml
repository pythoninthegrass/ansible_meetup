# code: language=ansible

---
- hosts: all
  become: false
  gather_facts: true
  any_errors_fatal: true
  vars:
    DOMAIN: bonfiredata.com
  vars_files:
    - "../vault.yml"
    - "./vars/all.yml"
  environment:
    EDITOR: vim
    PATH: "{{ ansible_env.HOME }}/.asdf/shims:{{ ansible_env.HOME }}/.asdf/bin:{{ ansible_env.HOME }}/.local/bin:{{ ansible_env.PATH }}"
  roles:
    - role: pre-tasks
      tags: pre

    - role: geerlingguy.swap
      swap_file_state: absent
      become: true
      tags: pre

    - role: geerlingguy.docker
      vars:
        docker_add_repo: true
        docker_repo_url: https://download.docker.com/linux
        docker_users:
          - "{{ ansible_user }}"
        docker_daemon_options:
          storage-driver: "vfs"
          log-opts:
            max-size: "100m"
      become: true
      tags: pre

    - role: asdf
      vars:
        asdf_user: "{{ local_user }}"
        asdf_group: "{{ local_user }}"
        asdf_dir: "{{ ansible_user_dir }}/.asdf"
        asdf_version: "v0.14.0"
        asdf_plugins:
          - name: lazydocker
            repository: "https://github.com/comdotlinux/asdf-lazydocker.git"
            versions: ["latest"]
            global: "latest"
          - name: lazygit
            versions: ["latest"]
            global: "latest"
          - name: nodejs
            versions: ["18.18.2"]
            global: "18.18.2"
          - name: poetry
            versions: ["latest"]
            global: "latest"
          - name: python
            versions: ["3.11.9"]
            global: "3.11.9"
          - name: ruby
      tags: pre
  tasks:
    - include_vars:
        file: vars/all.yml

    - include_tasks:
        file: pkg.yml
        apply:
          become_user: "{{ local_user }}"
          tags: pre
      tags: pre

    - include_tasks:
        file: git.yml
        apply:
          become_user: "{{ local_user }}"
          tags: pre

    - include_tasks:
        file: pull-repos.yml
        apply:
          become_user: "{{ local_user }}"
          tags: pre

    - include_role:
        name: create-env
        apply:
          environment:
            PATH: "{{ ansible_env.HOME }}/.asdf/shims:{{ ansible_env.HOME }}/.asdf/bin:{{ ansible_env.HOME }}/.local/bin:{{ ansible_env.PATH }}"
          vars:
            ENV: "prod"
            ENV_FILE: ".env"
            CLIENT_ID: "{{ client_id }}"
            CLIENT_SECRET: "{{ client_secret }}"
            OVERWRITE: "True"
          tags: pre

    - name: Copy certs
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/files/bonfiredata.com"
        dest: /etc/letsencrypt/live/
        owner: root
        group: root
        mode: 0644
        force: false
        remote_src: true
      become: true
      tags: certs

    - name: Copy nginx app config
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/app.fqdn.j2"
        dest: "/etc/nginx/conf.d/{{ SUBDOMAIN }}.{{ DOMAIN }}.conf"
        owner: root
        group: root
        mode: 0644
        force: false
      become: true
      vars:
        SUBDOMAIN: "app"
      tags: nginx

    - name: Copy nginx api config
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/api.fqdn.j2"
        dest: "/etc/nginx/conf.d/{{ SUBDOMAIN }}.{{ DOMAIN }}.conf"
        owner: root
        group: root
        mode: 0644
        force: false
      become: true
      vars:
        SUBDOMAIN: "api"
        PROXY_URL: "http://localhost"
        PROXY_PORT: "3000"
      tags: nginx

    - name: Deploy client
      ansible.builtin.shell: |
        ./scripts/deploy.sh "{{ BRANCH }}" "{{ ENV }}" "{{ FUND }}"
      args:
        chdir: "{{ home_dir }}/git/bonfire-client"
        executable: /bin/bash
      environment:
        DOWNLOAD_ENV: False
        INSTALL_DEPS: False
        PULL: True
      vars:
        BRANCH: main
        ENV: prod
        FUND: bonfire
      become_user: "{{ local_user }}"
      register: deploy_client_result
      failed_when: deploy_client_result.rc != 0
      tags: client

    - name: Deploy server
      ansible.builtin.shell: |
        ./scripts/deploy.sh "{{ BRANCH }}" "{{ FUND }}"
      args:
        chdir: "{{ home_dir }}/git/bonfire-server"
        executable: /bin/bash
      vars:
        BRANCH: main
        FUND: bonfire
      become_user: "{{ local_user }}"
      register: deploy_server_result
      failed_when: deploy_server_result.rc != 0
      tags: server

    # TODO: setup datadog
    # - name: Install datadaog agent
