# code: language=ansible

---
- hosts: localhost
  connection: local
  become: false
  gather_facts: true
  # debugger: on_failed
  any_errors_fatal: true
  vars:
    os_environment:
      - key: EDITOR
        value: vim
  pre_tasks:
    - name: Get running ansible user
      ansible.builtin.set_fact:
        local_user: "{{ lookup('env', 'USER') }}"
        home_dir: "{{ lookup('env', 'HOME') }}"
        work_dir: "{{ playbook_dir | dirname }}"
        cacheable: true
      tags: qa

    - name: Top-level directory in project
      ansible.builtin.shell: git rev-parse --show-toplevel
      register: tld
      tags: qa

    - name: Set tld stdout fact
      ansible.builtin.set_fact:
        tld: "{{ tld.stdout }}"
      tags: qa

    - name: Get OS release
      ansible.builtin.set_fact:
        os_release: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}"
        major_ver: "{{ ansible_distribution_major_version }}"
        distro: "{{ ansible_distribution }}"
      tags: qa

    - name: Enable ssh
      ansible.builtin.service:
        name: sshd
        state: started
        enabled: yes

    - name: Install pip
      become: true
      ansible.builtin.package:
        name: python3-pip
        state: present

    - name: Cross-platform dependencies
      ansible.builtin.package:
        name:
        - acl
        - ansible
        - ansible-lint
        - bats
        - ca-certificates
        - cloud-init
        - dbus-daemon
        - dbus-tools
        - dconf
        - gh
        - git
        - inxi
        - nemo
        - nemo-dropbox
        - nemo-fileroller
        - nemo-image-converter
        - nemo-preview
        - nemo-terminal
        - python3
        - python3-redis
        - python3-psutil
        - tree
        - vim
        state: present
      become: true

    - name: Install redhat packages
      ansible.builtin.dnf:
        name:
        - dnf-utils
        - dnf-plugins-core
        - firewall-config
        - NetworkManager-tui
        - python3-dnf-plugins-extras-versionlock
        update_cache: yes
        state: present
      become: true
      when: ansible_os_family == "RedHat"
      tags: qa
  tasks:
    # https://fedoramagazine.org/boot-earlier-kernel/
    - name: Pin working kernel (broken wifi)
      ansible.builtin.shell: |
        dnf versionlock kernel-6.0.7-301.fc37
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Set kernel retention
      ansible.builtin.lineinfile:
        dest: /etc/dnf/dnf.conf
        state: present
        regexp: '^installonly_limit'
        firstmatch: true
        line: 'installonly_limit=5'
        insertafter: EOF
      become: true
      when: ansible_os_family == "RedHat"

    - name: Disable grub auto-hide
      ansible.builtin.shell: |
        grub2-editenv - unset menu_auto_hide
      become: true
      when: ansible_os_family == "RedHat"
      tags: qa

    - name: Create nemo.desktop file
      ansible.builtin.copy:
        dest: "{{ home_dir }}/.local/share/applications/nemo.desktop"
        content: |
          [Desktop Entry]
          Name=Nemo
          Comment=File Manager
          Exec=nemo
          Icon=nemo
          Terminal=false
          Type=Application
          Categories=GNOME;GTK;Utility;FileTools;
          StartupNotify=true
          MimeType=inode/directory;
          Actions=NewWindow;
          # OnlyShowIn=X-Cinnamon;

          [Desktop Action NewWindow]
          Name=Open a New Window
          Exec=nemo --new-window
      become: true
      when: ansible_os_family == "RedHat"

    - name: Set nemo as default
      ansible.builtin.shell: |
        xdg-mime default nemo.desktop inode/directory
      when: ansible_os_family == "RedHat"

    - name: Backup nautilus icon
      ansible.builtin.copy:
        src: /usr/share/applications/org.gnome.Nautilus.desktop
        dest: "{{ home_dir }}/.local/share/applications/org.gnome.Nautilus.desktop"
        force: false
      when: ansible_os_family == "RedHat"

    - name: Disable nautilus icon
      ansible.builtin.lineinfile:
        path: "{{ home_dir }}/.local/share/applications/org.gnome.Nautilus.desktop"
        state: present
        regexp: '^NoDisplay='
        line: 'NoDisplay=true'
        insertafter: '[Desktop Entry]'
        firstmatch: true
      when: ansible_os_family == "RedHat"

    - name: Enable gnome remote desktop (org.gnome.desktop.remote-desktop.vnc)
      community.general.dconf:
        key: "/org/gnome/desktop/remote-desktop/vnc/auth-method"
        value: "'password'"

    - name: Enable gnome remote desktop (org.gnome.desktop.remote-desktop)
      community.general.dconf:
        key: "/org/gnome/desktop/remote-desktop/vnc/view-only"
        value: "'false'"

    - name: Enable gnome remote desktop (org.gnome.desktop.remote-desktop)
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/sharing/gnome-remote-desktop/enabled-connections"
        value: "['$( grep UUID /etc/sysconfig/network-scripts/ifcfg-enp1s0 | cut -d= -f2)']"

    - name: Enable gnome remote desktop (org.gnome.desktop.remote-desktop)
      ansible.builtin.systemd:
        state: started
        scope: user
        name: gnome-remote-desktop

    - name: Inactive timeout
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/power/sleep-inactive-ac-type"
        value: "'nothing'"

    - name: Show battery percentage
      community.general.dconf:
        key: "/org/gnome/desktop/interface/show-battery-percentage"
        value: "'true'"

    - name: terminal bell
      community.general.dconf:
        key: "/org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/audible-bell"
        value: "'false'"

    - name: App-switcher on the current workspace only
      community.general.dconf:
        key: "/org/gnome/shell/app-switcher/current-workspace-only"
        value: "'false'"

    - name: Clock show date
      community.general.dconf:
        key: "/org/gnome/desktop/interface/clock-show-date"
        value: "'true'"

    - name: Set 12-hour clock
      community.general.dconf:
        key: /org/gnome/desktop/interface/clock-format
        value: "'12h'"

    - name: Enable fractional scaling
      community.general.dconf:
        key: /org/gnome/mutter/scale-monitor-framebuffer
        value: "'true'"
      # tags: qa

    - name: Set fractional scaling to 150%
      community.general.dconf:
        key: /org/gnome/desktop/interface/scale-factor
        value: "'2'"

    - name: Set night light to 1st notch
      community.general.dconf:
        key: /org/gnome/settings-daemon/plugins/color/night-light-temperature
        value: "'4000'"

    - name: Enable subpixel antialiasing
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/xsettings/antialiasing"
        value: "'rgba'"

    - name: Disable natural scrolling
      community.general.dconf:
        key: /org/gnome/desktop/peripherals/touchpad/natural-scroll
        value: "'false'"
      # tags: qa

    - name: Set tap to click
      community.general.dconf:
        key: /org/gnome/desktop/peripherals/touchpad/tap-to-click
        value: "'false'"
      # tags: qa

    - name: Enable two-finger scrolling
      community.general.dconf:
        key: "/org/gnome/desktop/peripherals/touchpad/two-finger-scrolling-enabled"
        value: "'true'"

    - name: grubby
      become: true
      ansible.builtin.shell: |
        # Improve power saving for NVMe drives:
        grubby --update-kernel=ALL --args="nvme.noacpi=1"

        # Prevent a **potencial** Fedora freezing issue:
        grubby --update-kernel=ALL --args="i915.enable_psr=0"

        # To enable brightness up/down keys
        cpuinfo=$(cat /proc/cpuinfo | awk '/model name/ {print $NF; exit}')
        if [[ $cpuinfo == "i7-1260P" ]]; then
          grubby --update-kernel=ALL --args="module_blacklist=hid_sensor_hub"
        fi
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"
      # tags: qa

    - name: Install packages
      become: true
      ansible.builtin.dnf:
        name:
        - fprintd
        - fprintd-pam
        state: present
      # tags: qa

    - name: Check if fingerprint service is enabled
      ansible.builtin.lineinfile:
        state: absent
        path: "/usr/lib/systemd/system/fprintd.service"
        regexp: "^WantedBy=multi-user.target"
      check_mode: true
      register: check
      when: ansible_os_family == "RedHat"
      # tags: qa

    - name: Define fingerprint service as wanted by multi-user.target
      become: true
      ansible.builtin.lineinfile:
        path: "/usr/lib/systemd/system/fprintd.service"
        insertafter: "[Install]"
        line: |
          "WantedBy=multi-user.target"
        state: present
      when: ansible_os_family == "RedHat" and check.found == 1
      # tags: qa

    - name: Start fprintd.service
      become: true
      ansible.builtin.systemd:
        name: fprintd.service
        state: started
        enabled: yes
      when: ansible_os_family == "RedHat"
      # tags: qa

    - name: Print manual fingerprint instructions
      ansible.builtin.debug:
        msg: |
          # Erase any old fingerprints
          fprintd-delete $USER

          # Enroll your new fingerprint
          fprintd-enroll

          # Verify your new fingerprint
          fprintd-verify

          # Make sure PAM is authenticated for your fingerprint

          sudo authselect enable-feature with-fingerprint
          sudo authselect apply-changes

          # Verify it that the fingerprint reader is authorized
          # This will list what has been authorized.

          sudo authselect current

          If authselect looks good, upon reboot, your fingerprint will allow you login.
      when: ansible_os_family == "RedHat"
      # tags: qa
