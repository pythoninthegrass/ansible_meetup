# code: language=ansible

---
- hosts: ["dev", "servers"]
  become: false
  gather_facts: true
  any_errors_fatal: true
  vars:
    os_environment:
      - key: EDITOR
        value: vim
  pre_tasks:
    - name: Get running ansible user
      ansible.builtin.set_fact:
        local_user: "{{ ansible_facts['ansible_env']['SUDO_USER'] | default(ansible_user) }}"
        work_dir: "{{ playbook_dir | default(ansible_facts['ansible_env']['PWD']) }}"
        cacheable: true
      tags: pre

    - name: Get ansible user home
      ansible.builtin.shell: echo ~{{ local_user }}
      register: home_dir
      changed_when: false
      check_mode: false
      tags: pre

    - name: Set home_dir fact
      ansible.builtin.set_fact:
        home_dir: "{{ home_dir.stdout }}"
      tags: pre

    - name: Top-level directory in project
      ansible.builtin.shell: |
        cd "{{ playbook_dir | dirname }}"
        if [ -d .git ]; then
          git rev-parse --show-toplevel
        else
          echo "{{ playbook_dir | dirname }}"
        fi
      register: tld
      tags: pre

    - name: Set tld stdout fact
      ansible.builtin.set_fact:
        tld: "{{ tld.stdout }}"
      tags: pre

    - name: Set users.csv file path
      ansible.builtin.set_fact:
        users_file: "{{ tld }}/tasks/vars/users.csv"
      tags: pre

    - name: Check if users file exists and is not empty
      ansible.builtin.stat:
        path: "{{ users_file }}"
      register: users_file_stat
      tags: pre

    # TODO: fix `[WARNING]: Unable to find 'ansible.csv' in expected paths (use -vvvvv to see paths)`
    - name: Set usernames variable if file exists and is not empty
      ansible.builtin.set_fact:
        usernames: "{{ lookup('csvfile', users_file, format='csv', key='username') }}"
      when: users_file_stat.stat.exists and users_file_stat.stat.size > 0
      tags: pre, qa

    - debug:
        msg: "{{ usernames }}"
      tags: pre, qa

    - name: Set sudo group variable from csv file
      ansible.builtin.set_fact:
        use_sudo: "{{ lookup('csvfile', users_file, format='csv', key='sudo_group') }}"
      tags: pre, qa

    - debug:
        msg: "{{ use_sudo }}"
      tags: pre, qa

    - name: Set access control from csv file
      ansible.builtin.set_fact:
        acl: "{{ lookup('csvfile', users_file, format='csv', key='acl') }}"
      tags: pre, qa

    - debug:
        msg: "{{ acl }}"
      tags: pre, qa

    - name: Get OS release
      ansible.builtin.set_fact:
        os_release: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}"
        major_ver: "{{ ansible_distribution_major_version }}"
        distro: "{{ ansible_distribution }}"
      tags: pre
  tasks:
    - name: Create list of users
      ansible.builtin.set_fact:
        users: "{{ ['ansible'] + (usernames if usernames is defined else []) }}"

    - name: Create group from username
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      become: true
      with_items: "{{ users }}"

    - name: Create user
      ansible.builtin.user:
        name: "{{ item }}"
        shell: /bin/bash
        group: "{{ item }}"
        createhome: true
      become: true
      with_items: "{{ users }}"

    - name: Add user to groups
      ansible.builtin.shell:
        cmd: |
          if [[ ${{ distro }} == "Debian" ]]; then
            usermod -aG sudo "{{ item }}"
          else
            usermod -aG wheel "{{ item }}"
          fi
      become: true
      with_items: "{{ users }}"

    - name: Set user shell
      ansible.builtin.shell:
        cmd: chsh -s /bin/bash "{{ item }}"
      become: true
      with_items: "{{ users }}"

    # - name: Disable standard sudo group
    #   ansible.builtin.lineinfile:
    #     path: /etc/sudoers
    #     state: present
    #     regexp: '^%sudo\s+ALL=\(ALL\)\s+ALL$'
    #     firstmatch: true
    #     line: '# %sudo ALL=(ALL) ALL'
    #     validate: /usr/sbin/visudo -cf %s
    #   become: true
    #   when: ansible_os_family == "Debian"

    # - name: Enable sudo nopasswd
    #   ansible.builtin.lineinfile:
    #     path: /etc/sudoers
    #     state: present
    #     regexp: '^#\s%sudo\s+ALL=\(ALL\)\s+NOPASSWD:\s?ALL$'
    #     firstmatch: true
    #     line: '%sudo ALL=(ALL) NOPASSWD:ALL'
    #     validate: /usr/sbin/visudo -cf %s
    #   become: true

    - name: Set vim as default sudoers editor
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^Defaults\s+env_reset'
        line: 'Defaults    env_reset,  editor="/usr/bin/vim", timestamp_timeout=30'
        validate: /usr/sbin/visudo -cf %s

    - name: Add user public ssh keys
      ansible.posix.authorized_key:
        user: "{{ item }}"
        # key: "{{ lookup('file', home_dir + '/.ssh/id_rsa.pub') }}"
        key: >
          ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM+w28QEElnSFfBCcEiAhRtOPdoo6u7bcIySbpzPwaia permalik@protonmail.com
        state: present
      with_items: "{{ users }}"
      become: true
